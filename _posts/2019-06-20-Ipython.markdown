---
layout: post
title:  "IPython"
date:   2019-06-20 01:25:21 +0530
categories: python
tags: [ipython, jupyter notebook]
---

## Shortcut and tips for Ipython


```python
help(len) # and len? would return docstring of the function len
```

    Help on built-in function len in module builtins:

    len(obj, /)
        Return the number of items in a container.




```python
#  Both of these notations can be applied on objects as well.
L = [1,2,3]
help(L)
```

    Help on list object:

    class list(object)
     |  list(iterable=(), /)
     |  
     |  Built-in mutable sequence.
     |  
     |  If no argument is given, the constructor creates a new empty list.
     |  The argument must be an iterable if specified.
     |  
     |  Methods defined here:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iadd__(self, value, /)
     |      Implement self+=value.
     |  
     |  __imul__(self, value, /)
     |      Implement self*=value.
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __reversed__(self, /)
     |      Return a reverse iterator over the list.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  __sizeof__(self, /)
     |      Return the size of the list in memory, in bytes.
     |  
     |  append(self, object, /)
     |      Append object to the end of the list.
     |  
     |  clear(self, /)
     |      Remove all items from list.
     |  
     |  copy(self, /)
     |      Return a shallow copy of the list.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  extend(self, iterable, /)
     |      Extend list by appending elements from the iterable.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  insert(self, index, object, /)
     |      Insert object before index.
     |  
     |  pop(self, index=-1, /)
     |      Remove and return item at index (default last).
     |      
     |      Raises IndexError if list is empty or index is out of range.
     |  
     |  remove(self, value, /)
     |      Remove first occurrence of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  reverse(self, /)
     |      Reverse *IN PLACE*.
     |  
     |  sort(self, /, *, key=None, reverse=False)
     |      Stable sort *IN PLACE*.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None



?? would also give the code if possible, that is written in python


```python
def func():
    " test doc string"
    pass
func??
```

TAB to auto complete. It basically pulls results of dir while hiding private methods or arguments. Private by convetion in python are represented by underscore.


```python
# wild card can be used while searching.
str.*find*?
```

| shortcuts | actions |
| --- | --- |
| ctrl a | move to the begining of line |
| ctrl e | move to end of the line |
| ctrl k | cut till the end of line |
| ctrl u | cut from the begining of line |
| ctrl I | clear terminal |
| ctrl d | exit |


Ipython shortcuts

% line magic

%% cell magic

run a file in python
%run file.py argument

This is same as python file.py arguments



```python
%run
```


    %run:
     Run the named file inside IPython as a program.

    Usage::

      %run [-n -i -e -G]
           [( -t [-N<N>] | -d [-b<N>] | -p [profile options] )]
           ( -m mod | file ) [args]

    Parameters after the filename are passed as command-line arguments to
    the program (put in sys.argv). Then, control returns to IPython's
    prompt.

    This is similar to running at a system prompt ``python file args``,
    but with the advantage of giving you IPython's tracebacks, and of
    loading all variables into your interactive namespace for further use
    (unless -p is used, see below).

    The file is executed in a namespace initially consisting only of
    ``__name__=='__main__'`` and sys.argv constructed as indicated. It thus
    sees its environment as if it were being run as a stand-alone program
    (except for sharing global objects such as previously imported
    modules). But after execution, the IPython interactive namespace gets
    updated with all variables defined in the program (except for __name__
    and sys.argv). This allows for very convenient loading of code for
    interactive work, while giving each program a 'clean sheet' to run in.

    Arguments are expanded using shell-like glob match.  Patterns
    '*', '?', '[seq]' and '[!seq]' can be used.  Additionally,
    tilde '~' will be expanded into user's home directory.  Unlike
    real shells, quotation does not suppress expansions.  Use
    *two* back slashes (e.g. ``\\*``) to suppress expansions.
    To completely disable these expansions, you can use -G flag.

    On Windows systems, the use of single quotes `'` when specifying
    a file is not supported. Use double quotes `"`.

    Options:

    -n
      __name__ is NOT set to '__main__', but to the running file's name
      without extension (as python does under import).  This allows running
      scripts and reloading the definitions in them without calling code
      protected by an ``if __name__ == "__main__"`` clause.

    -i
      run the file in IPython's namespace instead of an empty one. This
      is useful if you are experimenting with code written in a text editor
      which depends on variables defined interactively.

    -e
      ignore sys.exit() calls or SystemExit exceptions in the script
      being run.  This is particularly useful if IPython is being used to
      run unittests, which always exit with a sys.exit() call.  In such
      cases you are interested in the output of the test results, not in
      seeing a traceback of the unittest module.

    -t
      print timing information at the end of the run.  IPython will give
      you an estimated CPU time consumption for your script, which under
      Unix uses the resource module to avoid the wraparound problems of
      time.clock().  Under Unix, an estimate of time spent on system tasks
      is also given (for Windows platforms this is reported as 0.0).

    If -t is given, an additional ``-N<N>`` option can be given, where <N>
    must be an integer indicating how many times you want the script to
    run.  The final timing report will include total and per run results.

    For example (testing the script uniq_stable.py)::

        In [1]: run -t uniq_stable

        IPython CPU timings (estimated):
          User  :    0.19597 s.
          System:        0.0 s.

        In [2]: run -t -N5 uniq_stable

        IPython CPU timings (estimated):
        Total runs performed: 5
          Times :      Total       Per run
          User  :   0.910862 s,  0.1821724 s.
          System:        0.0 s,        0.0 s.

    -d
      run your program under the control of pdb, the Python debugger.
      This allows you to execute your program step by step, watch variables,
      etc.  Internally, what IPython does is similar to calling::

          pdb.run('execfile("YOURFILENAME")')

      with a breakpoint set on line 1 of your file.  You can change the line
      number for this automatic breakpoint to be <N> by using the -bN option
      (where N must be an integer). For example::

          %run -d -b40 myscript

      will set the first breakpoint at line 40 in myscript.py.  Note that
      the first breakpoint must be set on a line which actually does
      something (not a comment or docstring) for it to stop execution.

      Or you can specify a breakpoint in a different file::

          %run -d -b myotherfile.py:20 myscript

      When the pdb debugger starts, you will see a (Pdb) prompt.  You must
      first enter 'c' (without quotes) to start execution up to the first
      breakpoint.

      Entering 'help' gives information about the use of the debugger.  You
      can easily see pdb's full documentation with "import pdb;pdb.help()"
      at a prompt.

    -p
      run program under the control of the Python profiler module (which
      prints a detailed report of execution times, function calls, etc).

      You can pass other options after -p which affect the behavior of the
      profiler itself. See the docs for %prun for details.

      In this mode, the program's variables do NOT propagate back to the
      IPython interactive namespace (because they remain in the namespace
      where the profiler executes them).

      Internally this triggers a call to %prun, see its documentation for
      details on the options available specifically for profiling.

    There is one special usage for which the text above doesn't apply:
    if the filename ends with .ipy[nb], the file is run as ipython script,
    just as if the commands were written on IPython prompt.

    -m
      specify module name to load instead of script path. Similar to
      the -m option for the python interpreter. Use this option last if you
      want to combine with other %run options. Unlike the python interpreter
      only source modules are allowed no .pyc or .pyo files.
      For example::

          %run -m example

      will run the example module.

    -G
      disable shell-like glob expansion of arguments.


    /home/luffy/miniconda3/lib/python3.7/site-packages/IPython/core/magics/execution.py:691: UserWarning: you must provide at least a filename.
      warn('you must provide at least a filename.')



```python
# to time a single line
%timeit len(L)
```

    75.2 ns ± 1.29 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)



```python
%%timeit
def f(L):
    return(len(L))
f(L)

# to time the whole block
```

    263 ns ± 9.34 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)



```python
# More details of magic command can be found at
%magic
%lsmagic
```




    Available line magics:
    %alias  %alias_magic  %autoawait  %autocall  %automagic  %autosave  %bookmark  %cat  %cd  %clear  %colors  %conda  %config  %connect_info  %cp  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %pip  %popd  %pprint  %precision  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode

    Available cell magics:
    %%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile

    Automagic is ON, % prefix IS NOT needed for line magics.




```python
# Last value can accessed through _ underscore though it may be feature of ipython only. It can be used store garbage values
_
```




    Available line magics:
    %alias  %alias_magic  %autoawait  %autocall  %automagic  %autosave  %bookmark  %cat  %cd  %clear  %colors  %conda  %config  %connect_info  %cp  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %pip  %popd  %pprint  %precision  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode

    Available cell magics:
    %%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile

    Automagic is ON, % prefix IS NOT needed for line magics.




```python
Semicolon will supress the output
_;
```


```python
# to run the system commnad
!ls
```

     Ipython.ipynb	'python setup'



```python
# results can be saved in the list format
xres = !ls
xres
```




    ['Ipython.ipynb', 'python setup']




```python
# !cd will not work since this commnad are executed in temporary shell
import os
print(os.getcwd())
!cd ..
print(os.getcwd())
```

    /home/luffy/work/Code/Python
    /home/luffy/work/Code/Python


Standard python debugger pdb  or ipdn (ipython version) can used.
To debug from ipython:



```python
%xmode Plain
```
